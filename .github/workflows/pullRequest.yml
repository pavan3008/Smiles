# name: Pull Request

# on:
#   pull_request:
#     branches:
#       - main
#       - pavan/added-budget-screens
#   workflow_dispatch:

# jobs:
#   test:
#     runs-on: macos-latest
#     steps:
#       - uses: actions/checkout@v3

#       - name: Cancel Previous Runs
#         uses: styfle/cancel-workflow-action@0.11.0
#         with:
#           access_token: ${{ secrets.ACCESS_TOKEN }}

#       - uses: maxim-lobanov/setup-xcode@v1
#         with:
#           xcode-version: latest-stable

#       - uses: ruby/setup-ruby@v1

#       - name: Install Bundler
#         run: gem install bundler

#       - name: Install gems
#         run: bundle install

#       - name: Swift Packages Cache
#         uses: actions/cache@v3
#         id: cache
#         with:
#           path: |
#             Build/SourcePackages
#             Build/Build/Products
#           key: ${{ runner.os }}-deps-v1-${{ hashFiles('BILDsolid.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
#           restore-keys: ${{ runner.os }}-deps-v1-

#       - name: Run Tests (No Cache)
#         if: steps.setup.outputs.cache-hit != 'true'
#         run: bundle exec fastlane unit_test
      
#       - name: Run Tests (Cache)
#         if: steps.setup.outputs.cache-hit == 'true'
#         run: bundle exec fastlane unit_test skip_package_dependencies_resolution:true

#name of your config
name: Swift

#when to trigger the jobs
on: 
  # push:
  #   branches: [ master ] #trigger on each push to master
  pull_request:
    branches: [ main ] #trigger on each PR for master

#list of jobs to perform
jobs:
  #the only job in the list, named `build`
  build: 
    #specify OS to run the jobs on
    runs-on: macos-latest 
    #sequential steps to run for the `build` job
    steps: 
      # step 1, use Marketplace action called Checkout@v2, to checkout the code
    - uses: actions/checkout@v3 #'uses' keyword launches the Marketplace action
      # step 2, verbosely build the package using the `swift` CLI
    - name: Build
      run: swift build -v #'run' keyword executes the command, as if it's run in terminal
      # step 3, verbosely test the package using the `swift` CLI
    - name: Run tests
      run: swift test -v #'run' keyword executes the command, as if it's run in terminal